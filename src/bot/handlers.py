"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import time
import logging
from collections import defaultdict
from typing import Dict, Any

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config.settings import config
from src.services.story_generator_factory import get_story_generator
from src.services.tts_service import tts_service
from src.utils.formatters import format_story_for_telegram, truncate_text, extract_story_title
from src.bot.keyboards import get_main_keyboard, get_tts_keyboard, get_story_actions_keyboard

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cooldowns: Dict[int, float] = defaultdict(float)
user_states: Dict[int, str] = defaultdict(str)
user_last_story: Dict[int, str] = defaultdict(str)

class StoryBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ —Å–∫–∞–∑–æ–∫"""
    
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = get_main_keyboard()
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –°–∫–∞–∑–∫–∏–Ω ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–∏–Ω—è–µ—Ç —Å–∫–∞–∑–∫–∏ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É! ‚ú®\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é.",
            reply_markup=keyboard
        )
    
    @staticmethod
    async def send_story(update: Update, context: ContextTypes.DEFAULT_TYPE, prompt: str):
        await update.message.reply_text("üìù –ü–∏—à—É —Å–∫–∞–∑–∫—É...")

        story_generator = get_story_generator()
        story = story_generator.generate_story(prompt)

        if not story:
            await update.message.reply_text(config.errors.GENERIC_ERROR)
            return

        formatted_story = format_story_for_telegram(story)

        if len(formatted_story) > config.bot.MAX_STORY_LENGTH:
            formatted_story = truncate_text(formatted_story, config.bot.MAX_STORY_LENGTH)

        user_last_story[update.effective_user.id] = story

        await update.message.reply_text(formatted_story, parse_mode=ParseMode.MARKDOWN)

        if tts_service.is_available():
            keyboard = get_tts_keyboard()
            await update.message.reply_text("–•–æ—á–µ—à—å, –æ–∑–≤—É—á—É —Å–∫–∞–∑–∫—É? üéô", reply_markup=keyboard)
            
    @staticmethod
    async def handle_tts_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ TTS"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        story = user_last_story.get(user_id)
        
        if not story:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∂–∏ —Å–∫–∞–∑–∫—É.")
            return
        
        await query.edit_message_text("üéô –û–∑–≤—É—á–∏–≤–∞—é —Å–∫–∞–∑–∫—É...")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏
            story_title = extract_story_title(story)
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–∞–∑–∫–∏
            result = tts_service.synthesize_speech(story, story_title)
            
            if result:
                audio_data, temp_filename = result
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–∞–∑–∫–∏
                    with open(temp_filename, "rb") as audio_file:
                        await query.message.reply_audio(
                            audio_file, 
                            caption=f"üìñ {story_title}"
                        )
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    tts_service.cleanup_temp_file(temp_filename)
            else:
                await query.message.reply_text(config.errors.TTS_ERROR)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}")
            await query.message.reply_text(config.errors.TTS_ERROR)
    
    @staticmethod
    async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        user_id = update.effective_user.id
        now = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if now - user_cooldowns[user_id] < config.bot.COOLDOWN_SECONDS:
            await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        user_cooldowns[user_id] = now
        topic = update.message.text.strip()
        
        # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        prompts = {
            "üêæ –ü—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö": "–ü—Ä–∏–¥—É–º–∞–π —Å–∫–∞–∑–∫—É –ø—Ä–æ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.",
            "üèù –ü—Ä–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": "–ü—Ä–∏–¥—É–º–∞–π —Å–∫–∞–∑–∫—É –æ –¥–µ—Ç—è—Ö –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏.",
            "üîÆ –ü—Ä–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ": "–ü—Ä–∏–¥—É–º–∞–π –≤–æ–ª—à–µ–±–Ω—É—é —Å–∫–∞–∑–∫—É —Å —á—É–¥–µ—Å–∞–º–∏."
        }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ –ª—é–±–∏–º–æ–≥–æ –≥–µ—Ä–æ—è"
        if topic == "üåü –ü—Ä–æ –ª—é–±–∏–º–æ–≥–æ –≥–µ—Ä–æ—è":
            user_states[user_id] = "awaiting_hero_description"
            await update.message.reply_text("–û–ø–∏—à–∏ –ª—é–±–∏–º–æ–≥–æ –≥–µ—Ä–æ—è.")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if prompt := prompts.get(topic):
            await StoryBotHandlers.send_story(update, context, prompt)
    
    @staticmethod
    async def handle_custom_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        user_id = update.effective_user.id
        user_input = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≥–µ—Ä–æ—è (–±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞)
        if user_states.get(user_id) == "awaiting_hero_description":
            user_states[user_id] = ""
            prompt = f"–ü—Ä–∏–¥—É–º–∞–π —Å–∫–∞–∑–∫—É —Å –≥–µ—Ä–æ–µ–º: {user_input}"
            await StoryBotHandlers.send_story(update, context, prompt)
            return
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        now = time.time()
        if now - user_cooldowns[user_id] < config.bot.COOLDOWN_SECONDS:
            await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        user_cooldowns[user_id] = now
        prompt = user_input
        
        await StoryBotHandlers.send_story(update, context, prompt)
    
    @staticmethod
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=context.error)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text(config.errors.DEFAULT)
